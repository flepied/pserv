#!/bin/bash
#
# Example init.d script with LSB support.
#
# Please read this init.d carefully and modify the sections to
# adjust it to the program you want to run.
#
# Copyright (c) 2007 Javier Fernandez-Sanguino <jfs@debian.org>
#
# This is free software; you may redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2,
# or (at your option) any later version.
#
# This is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License with
# the Debian operating system, in /usr/share/common-licenses/GPL;  if
# not, write to the Free Software Foundation, Inc., 59 Temple Place,
# Suite 330, Boston, MA 02111-1307 USA
#
### BEGIN INIT INFO
# Provides:          pserv-miniupnpc
# Required-Start:    $network $local_fs
# Required-Stop:
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: redirect ports on the UPnP gateway
# Description:       <Enter a long description of the software>
#                    <...>
#                    <...>
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

DAEMON=/usr/bin/upnpc	    # Introduce the server's location here
NAME=pserv-miniupnpc	    # Introduce the short server's name here
DESC="Redirection of ports" # Introduce a short description here
LOGDIR=/var/log		    # Log directory to use
PORTS=

PIDFILE=/var/run/$NAME.pid

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

# Default options, these can be overriden by the information
# at /etc/default/$NAME
DAEMON_OPTS=""          # Additional options given to the server

DIETIME=10              # Time to wait for the server to die, in seconds
                        # If this value is set too low you might not
                        # let some servers to die gracefully and
                        # 'restart' will not work

#STARTTIME=2             # Time to wait for the server to start, in seconds
                        # If this value is set each time the server is
                        # started (on start or restart) the script will
                        # stall to try to determine if it is running
                        # If it is not set and the server takes time
                        # to setup a pid file the log message might
                        # be a false positive (says it did not start
                        # when it actually did)

LOGFILE=$LOGDIR/$NAME.log  # Server logfile

# Include defaults if available
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

set -e

action() {
    opt=$1
    if [ -n "$PORTS" ]; then
	args=
	for port in $PORTS; do
	    args="$args $port tcp"
	done
	$DAEMON $opt $args >> $LOGFILE
    fi
}

start_server() {
    action -r
}

stop_server() {
    action -d
}

status_server() {
    if check_server no; then
        echo "ports ${PORTS}redirected."
    else
        echo "ports ${PORTS}not redirected."
        exit 1
    fi
}

check_server() {
    temp=`tempfile`
    do_restart=0
    $DAEMON -l 2>&1|fgrep TCP > $temp || do_restart=1
    for port in $PORTS; do
	if ! fgrep -q ":$port " $temp; then
	    do_restart=1
	    break
	fi
    done
    rm -f $temp
    if [ $do_restart = 1 ]; then
	if [ -z "$1" ]; then
	    start_server
	    return $?
	else
	    return 1
	fi
    fi
    return 0
}


case "$1" in
  start)
        log_daemon_msg "Starting $DESC " "$NAME"
        if start_server ; then
            log_end_msg 0
        else
            # Either we could not start it
            log_end_msg 1
        fi
        ;;
    
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        if stop_server ; then
            log_end_msg 0
        else
            # Either we could not start it
            log_end_msg 1
        fi
        ;;

  force-stop)
        # First try to stop gracefully the program
        $0 stop
        ;;

  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        errcode=0
        stop_server || errcode=$?
        start_server || errcode=$?
        log_end_msg $errcode
        ;;

  status)
        log_daemon_msg "Checking status of $DESC" "$NAME"
	status_server
        ;;

  check)
	check_server
	exit $?
	;;

  # Use this if the daemon cannot reload
  reload)
	$0 start
        ;;

  *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|force-stop|restart|force-reload|reload|check|status}" >&2
        exit 1
        ;;
esac

exit 0
